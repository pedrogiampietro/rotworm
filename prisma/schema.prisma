generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  items     Item[] // Relação com os itens postados pelo usuário
  purchases Purchase[] // Compras realizadas pelo usuário
  sales     Sale[] // Itens vendidos pelo usuário
}

model Item {
  id          String     @id @default(cuid())
  name        String // Nome do item
  description String? // Descrição opcional do item
  imageUrl    String? // URL da imagem do item
  price       Float // Preço do item em gold coins
  createdAt   DateTime   @default(now()) // Data de criação do anúncio
  updatedAt   DateTime   @updatedAt // Data da última atualização do item
  isSold      Boolean    @default(false) // Marca se o item já foi vendido
  sellerId    String
  seller      User       @relation(fields: [sellerId], references: [id]) // Vendedor do item
  Purchase    Purchase[]
  Sale        Sale[]
}

model Purchase {
  id          String   @id @default(cuid())
  buyerId     String
  buyer       User     @relation(fields: [buyerId], references: [id]) // Quem comprou o item
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id]) // O item comprado
  purchasedAt DateTime @default(now()) // Data da compra
  price       Float // Valor pago pelo item
}

model Sale {
  id       String   @id @default(cuid())
  sellerId String
  seller   User     @relation(fields: [sellerId], references: [id]) // Quem vendeu o item
  itemId   String
  item     Item     @relation(fields: [itemId], references: [id]) // O item vendido
  soldAt   DateTime @default(now()) // Data da venda
  price    Float // Valor pelo qual o item foi vendido
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
